- プロジェクトで引き回す型をEffにするメリット

Eff の話　以外に
業務例外・システム例外 を含む型の扱い方のメリデメ一覧となっていて良き

・Future[A]
・Future[Try[A]]
・Future[EIther[E,A]]
・Either[Future,E,A]

- Future の代わりに Task が使われることもある
  Task とは？  monix.Task とScalaz.Task がある

・Eff[E,A]



----
・Future[A]
  まずは使い方 (cup本参照)
  - ポーリング(処理が完了したかどうかを調べる)のために
    isCompleted と value がある

    isCompleted: Boolean
      処理が完了していないならfalse, 完了したら true を返す

    value: Option[Try]
      処理が完了していないならNone, 完了したら Some(Try) を返す

    ※ Try 型
      Success と Failure があり、これでエラーハンドリングをする

      通常のtry-catch では
      非同期処理の場合計算を始めたスレッド != 例外を投げたスレッド となることがあり
      元のスレッドがcatch節を処理できない


エラーハンドリングが荒い
=> Throwable で業務例外を作る // Javaっぽい感じ
     class UserNotFoundExeption extends MyException 的な
     Throwableを扱うから型安全でない？


・vs Option  Throwable を持つぶん Noneよりは情報がある
・vs Either  Either[Throwable, T] と同様

コールバック : 関数を渡すこと
  Future に関数  Thread.sleep ; 21 * 23 ; をわたす　みたいな

https://docs.scala-lang.org/ja/overviews/core/futures.html


Futureでのエラーハンドリングはこんな感じ？

Try[T] は SUccess[T] または Failure(e: Throwable)[T]

問題 セマフォ の制御？ ができない [要検証]


----
Future[Try[T]]

エラーハンドリングはこんな感じ？


----

Task とは？

標準ではTask はない
Scalaz.Task
Monix.Task



----
Future[Either[E, T]]

・Either により、業務例外を扱えるようになる

・型合わせが難しい


--------
Eff
  例はわかりづらいので、getStartedしよう

メインの構成物は Eff, Member, Fx


introduction
やはりあの論文が元
Monad Transformer に比べて、色々ご利益はある

Eff[R, A] R: a set of effects , A:  the value returned by the computation
なんか見たことある(けどよくわからないやつ)


program の例では
実行を runReader, runWriter, runEval .run するだけで
Reader -> Writer -> Eval -> Writer としている。
(特に、最後のWriter 処理を実行したいときに書かなくていい)


Free Monad for Cats なんてものがある！


Eff は
DSL for a key-value stor のようなもの
・keyにひもづくvalueを格納 <===> write a sequence of these operations in the embedded DSL as a “program”
・keyからvalueを取得      <===> interpret the “program”,
・keyにひもづくvalueを削除 <===>  finally execute the “program”


特に、プログラムの生成と実行は分離したい // よく聞くが、何だろう？


・ADT(代数的データ型) のFree 化

1. Create smart constructors for KVStore[_] using Eff.send

   スマートコンストラクタ を作り、store, find, delete, update メソッドを作る
   これにより、KVStore はRのメンバーとなる。？？？

2. Build a program out of key-value DSL operations
   見た目はmonadみたいな使い方
   しかし、再帰的なデータ構造を作っただけ


3. Build an interpreter for programs of DSL operations
   eff は DSL(domain specific language)を作るためのもの。
   DSLを解釈して実行するinterpreter が必要

   eff は(monad同様)一連の処理 のように見える。
   => List のfoldのように処理を結合することを考えられる。


   interpretUnsafe: 副作用をを定義するtrait
     interpretUnsafe(x: X): T[X]
   translate: 同じstackの他のeffectへ翻訳する



4. Execute our interpreted program
5. [optional] add some syntax for the interpreter
